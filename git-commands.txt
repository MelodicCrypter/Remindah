NOTE: just replace the <text> including the arrows with real data

git init                                                    (initializes git for your project)
git clone <url>                                             (clones or downloads a repository to your local environment)
git status                                                  (checks the status or changes of the repository)
git diff --cached                                           (show the changes of the file/s that is/are about to be committed)
git diff                                                    (show and lets you review the changes you have made)
git add .                                                   (add ALL the files to be committed)
git add -A                                                  (handles all deletions, modifications and automatically moves to staging)
git add --all                                               (handles all deletions, modifications and automatically moves to staging)
git commit -m "message here"                                (committing or preparing the changes you made, with -m you are able to put a message)
git push                                                    (pushes all changes, meaning everything will overwritten with the new changes)
git pull                                                    (it is a shorthand for git fetch, which will get all the latest overall status of the repository)
git log                                                     (it basically just show all the commit logs, who did and when)
git config --global user.email "user@email.com"             (setting the committer email)
git config --global user.name "your name"                   (setting the committer name)
git checkout <file>                                         (file modified but you want to ignore the change, so undo)
git reset HEAD <file>                                       (unstaging, ignoring "added" files then add the new modified one)
git rm <file>                                               (deletes file and put to staging automatically, ready for commit)

// Branch
git checkout hash                                           (this will let you restore a specific log, you can also save it as master if you like)
git checkout -b <newBranchName> hash                        (this will let you create a new branch)
git branch                                                  (lists all branches)
git checkout master                                         (if you want to return to master, you can also use this to choose a specific branch name)
git branch <newBranchname> hash                             (after returning to master, you can create a new branch from the specific log you loaded seconds ago)
git branch <newBranchname>                                  (creating a fresh branch)
git branch -m <oldName newName>                             (changing a branch name to something else)
git branch -D <branchName>                                  (deleting a specific branch)

// Merge
git merge <branchName>                                      (merging branch to master, this code applies if you are already inside master)

// gitIgnore files
.file                                                       (starts with . then name of file)