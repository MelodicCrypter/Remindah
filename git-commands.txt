NOTE: just replace the <text> including the arrows with real data

git init                                                    (initializes git for your project)
git clone <url>                                             (clones or downloads a repository to your local environment)
git status                                                  (checks the status or changes of the repository)
git diff                                                    (show and lets you review the changes you have made)
git diff --cached                                           (show the changes of the file/s that is/are about to be committed)
git diff --stat                                             (still, it will show the changes that were made, to check the number of lines changed)
git add .                                                   (add ALL the files to be committed)
git add -A                                                  (handles all deletions, modifications and automatically moves to staging)
git add --all                                               (handles all deletions, modifications and automatically moves to staging)
git commit -m "message here"                                (committing or preparing the changes you made, with -m you are able to put a message)
git commit --amend                                          (this will allow you to change the commit message from your previous commits)
git push                                                    (pushes all changes, meaning everything will overwritten with the new changes)
git push --force-with-lease                                 (gives you the flexibility to override new commits on your remote branch, whilst protecting your old commit history)
git pull                                                    (it is a shorthand for git fetch, which will get all the latest overall status of the repository)
git fetch --all                                             (other way to pull or fetch all the latest commits)
git log                                                     (it basically just show all the commit logs, who did and when)
git config --global user.email "user@email.com"             (setting the committer email)
git config --global user.name "your name"                   (setting the committer name)
git checkout <file>                                         (file modified but you want to ignore the change, so undo)
git reset HEAD <file>                                       (unstaging, ignoring "added" files then add the new modified one)
git rm <file>                                               (deletes file and put to staging automatically, ready for commit)
git cherry-pick <commit-hash>                               (This will grab a commit from a different branch and applies it to the current branch)

// Branch
git checkout hash                                           (this will let you restore a specific log, you can also save it as master if you like)
git branch <newBranchname>                                  (creating a fresh branch)
git checkout <branchName>                                   (this will allow you to select a specific branch, or if you want to return to master)
git checkout -b <newBranchName>                             (this is a shortcut that lets you create a new branch and immediately switch to that newly created branch) ====
git branch                                                  (lists all branches)
git branch -a                                               (list ALL branches, even branches that are on the remote)
git branch <newBranchname> hash                             (after returning to master, you can create a new branch from the specific log you loaded seconds ago)
git branch -m <oldName newName>                             (changing a branch name to something else)
git branch -D <branchName>                                  (deleting a specific branch)
git push origin <branchName>                                (if there is no upstream branch, use this to push your branch)
git pull origin <branchName>                                (it will allow you to get the most recent changes from the remote branch)
git pull --rebase origin <branchName>                       (it will pull changes from a specific branch and rebase it to your branch to latest commits)
git rebase -i origin/<branchName>                           (rebase applies commits, one by one, from current branch onto another. The -i will open an editor with a list of commits which are about to be changed.)
git reset --hard origin/master                              (it will unstage and reset all your local changes and will match the file in origin/master)
git reset --hard origin/<branchName>                        (the same with above but if you are on a branch, you can use this)

// Merge
git merge master                                            (if you are inside a branch, then you can use this to merge master to the branch you're in)
git rebase master                                           (if you are inside a branch, this will take your changes off from the branch you're in, get latest master changes, then it will combine but this will not merge yet)
git merge <branchName>                                      (merging branch to master, this code applies if you are already inside master)
git merge <branchName> -no-ff                               (if you are already on master, this tells git you want to retain all of the commit messages prior to merge, good for future reference)
git merge --abort                                           (this will return to the clean state BEFORE you started the merge at any time)
git reset --hard                                            (in case you've made a mistake, and you just realize this after the merge, then you can undo and roll back to the commit before the merge, start over again)

// Merge, pertaining to conflicts
git config rerere.enabled true                              (can be a solution :: if ever there is a same conflict that has been previously recorded, this, if enabled, will automatically resolve it for you)
git merge -s ours <branchName>                              (if in case there is a conflict and you want to use/select your branch)
git merge -s theirs <branchName>                            (if in case there is a conflict and you want to use/select their branch)

// gitIgnore files
.file                                                       (starts with . then name of file)
